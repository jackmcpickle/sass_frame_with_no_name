@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}


@mixin circularize($size, $color) {
  border-radius: 50%;
  width: $size;
  height: $size;
  line-height: $size - 1px;
  background: $color;
}

// Modile first sizes
@mixin media-font-size($font-size: $base-font-size) {
  font-size: $font-size;
  @each $size, $breakpoint in $breakpoints {
    @include media("screen", ">=#{$breakpoint}") {
      font-size: size-adjust($font-size, $size);
    }
  }
}

@function size-adjust($font-size, $size) {
  @if $size == "xsmall" {
    @return $font-size
  }
  @if $size == "small" {
    @return $font-size * 1.5
  }
  @elseif $size == "medium" {
    @return $font-size * 1.7
  }
  @elseif $size == "large" {
    @return $font-size * 1.8
  }
  @elseif $size == "xlarge" {
    @return $font-size * 2
  }
  @else {
    @return $font-size
  }
}



@mixin hover() {
  &:hover, &:focus, &:active {
    @content
  }
}

@mixin css-arrow($width: 6px, $height: 6px, $direction: "down", $color: #fff) {
  width: 0;
  height: 0;
  @if ($direction == "left") or ($direction == "right") {
    border: ($height/2) solid transparent;
  }
  @else {
    border: ($width/2) solid transparent;
  }

  @if $direction == "left"{
    border-left-width: 0;
    border-right-width: $width;
    border-right-color: $color;
  }
  @else if $direction == "right" {
    border-right-width: 0;
    border-left-width: $width;
    border-left-color: $color;
  }
  @else if $direction == "up" {
    border-top-width: 0;
    border-bottom-width: $height;
    border-bottom-color: $color;
  }
  @else if $direction == "down" {
    border-bottom-width: 0;
    border-top-width: $height;
    border-top-color: $color;
  }
}

@mixin css-arrow-flipto($width: 6px, $height: 6px, $direction: "down", $color: #fff) {
  @if $direction == "left" {
    border-left-width: 0;
    border-left-color: transparent;
    border-right-width: $width;
    border-right-color: $color;
  }
  @else if $direction == "right" {
    border-right-width: 0;
    border-right-color: transparent;
    border-left-width: $width;
    border-left-color: $color;
  }
  @else if $direction == "up" {
    border-top-width: 0;
    border-top-color: transparent;
    border-bottom-width: $height;
    border-bottom-color: $color;
  }
  @else if $direction == "down" {
    border-bottom-width: 0;
    border-bottom-color: transparent;
    border-top-width: $height;
    border-top-color: $color;
  }
}

// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius:$global-radius) {
  @if $radius {
    border-radius: $radius;
  }
}

// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  transition: $property $speed $ease;
}


// @mixins
//
// We use this to create the icon with three lines aka the hamburger icon, the menu-icon or the navicon
// $width - Width of hamburger icon in rem
// $left - If false, icon will be centered horizontally || explicitly set value in rem
// $top - If false, icon will be centered vertically || explicitly set value in rem
// $thickness - thickness of lines in hamburger icon, set value in px
// $gap - spacing between the lines in hamburger icon, set value in px
// $color - icon color
// $hover-color - icon color during hover
// $offcanvas - Set to true of @include in offcanvas
@mixin hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
  span::after {
    content: "";
    position: absolute;
    display: block;
    height: 0;

    @if $offcanvas {
      @if $top {
        top: $top;
      }
      @else {
        top: 50%;
        margin-top: (-$width/2);
      }
      @if $left {
        left: $left;
      }
      @else {
        left: ($tabbar-menu-icon-width - $width)/2;
      }
    }
    @else {
      top: 50%;
      margin-top: -($width/2);
      #{$opposite-direction}: $topbar-link-padding;
    }

    box-shadow:
      0 0 0 $thickness $color,
      0 $gap + $thickness 0 $thickness $color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $color;
    width: $width;
  }
  span:hover:after {
    box-shadow:
      0 0 0 $thickness $hover-color,
      0 $gap + $thickness 0 $thickness $hover-color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color;
  }
}


// @mixins
//
// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
  transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

  &:#{$selector} {
    box-shadow: 0 0 5px $glowing-effect-color;
    border-color: $glowing-effect-color;
  }
}

// @mixins
//
// We use this to translate elements in 2D
// $horizontal: Default: 0
// $vertical: Default: 0
@mixin translate2d($horizontal:0, $vertical:0) {
  transform: translate($horizontal,$vertical)
}

// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}
