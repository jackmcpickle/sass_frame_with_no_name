// Adjust values from list
@function adjust-values($iteration, $start-values, $change-values, $total-iterations, $ease) {

  $progress: $iteration / $total-iterations;

  $adjusted-values: ();
  @each $start, $change in $change-values {
    // adjust value based on type of ease
    $adjusted: ease($progress, $start, $change, $ease);
    // adjust to 2 decimal places
    $adjusted: round($adjusted * 100) / 100;
    $adjusted-values: join($adjusted-values, $adjusted, space );
  }
  @return $adjusted-values;
}

@function change-values($start-value, $end-value) {
  $multiple: length($start-value) != length($end-value);
  $start-list: $start-value; $end-list: $end-value;
  @if $multiple {
    $start-list: split-list($start-value);
    $end-list: split-list($end-value);
  }
  $change-list: compare-lists($start-list, $end-list);
  @return zip($start-list, $change-list);
}

@function compare-lists($start, $end) {
  // combines lists with matching pairs
  $list: zip($start, $end);
  $change-list: ();
  // calculate change value on pairs
  @each $l in $list {
    $change: nth($l,2) - nth($l,1);
    $change-list: join( $change-list, $change, space );
  }
  @return $change-list;
}

@function split-list($list) {

  $list-size: length($list);
  $top: ''; $left: ''; $bottom: ''; $right: '';

  // top/bottom/left/right match
  @if ($list-size == 1) {
    $top: $list;
    $right: $list;
    $bottom: $list;
    $left: $list;
  }
  // top/bottom match, left/right match
  @elseif ($list-size == 2) {
    $top: nth($list,1);
    $bottom: nth($list,1);
    $right: nth($list,2);
    $left: nth($list,2);
  }
  // top/bottom differ, left/right match
  @elseif ($list-size == 3) {
    $top: nth($list,1);
    $right: nth($list,2);
    $left: nth($list,2);
    $bottom: nth($list,3);
  }
  // top/bottom/left/right differ
  @elseif ($list-size == 4) {
    @return $list;
  }
  @else {
    @warn "Your #{list} is too large with #{$list-size} properties";
  }

  @return $top $right $bottom $left;

}

// adapted from http://www.kirupa.com/forum/showthread.php?378287-Robert-Penner-s-Easing-Equations-in-Pure-JS-%28no-jQuery%29
@function ease($progress, $start-value, $change, $ease) {

  // value increases evenly
  @if $ease == linear {
    @return $change * $progress + $start-value;
  }

  // value increases on a curve, accelerating
  @if $ease == in-quad {
    @return $change * $progress * $progress + $start-value;
  }

  // value increases on a curve, decelerating
  @if $ease == out-quad {
    @return -$change * $progress * ($progress - 2) + $start-value;
  }

  // value accelerates sharply
  @if $ease == in-cubic {
    @return $change * pow($progress, 3) + $start-value;
  }

  // value decelerates sharply
  @if $ease == out-cubic {
    @return $change * (pow($progress - 1, 3) + 1) + $start-value;
  }

  // value accelerates more sharply
  @if $ease == in-quart {
    @return $change * pow($progress, 4) + $start-value;
  }

  // value decelerates more sharply
  @if $ease == out-quart {
    @return -$change * (pow($progress - 1, 4) - 1) + $start-value;
  }

  // value accelerates very sharply
  @if $ease == in-quint {
    @return $change * pow($progress, 5) + $start-value;
  }

  // value decelerates very sharply
  @if $ease == out-quint {
    @return $change * (pow($progress - 1, 5) + 1) + $start-value;
  }
}

// pow and sqrt required by ease function
// adapted from https://github.com/at-import/Sassy-math/blob/master/sass/math.scss
@function pow($base, $exponent) {
  $value: $base;

  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }

  @if $exponent < 1 {
    @for $i from 0 through - $exponent {
      $value: $value / $base;
    }
  }

  @return $value;
}

@function sqrt($number) {
  $root: 4;

  @for $i from 1 through 50 {
    $root: $root - (pow($root, 2) - $number) / (2 * $root);
  }

  @return $root;
}
